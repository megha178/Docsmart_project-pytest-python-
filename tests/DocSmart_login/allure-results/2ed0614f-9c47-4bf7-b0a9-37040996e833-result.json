{"name": "test_valid_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=126.0.6478.126)\nStacktrace:\n\tGetHandleVerifier [0x00007FF61911EEA2+31554]\n\t(No symbol) [0x00007FF619097ED9]\n\t(No symbol) [0x00007FF618F58559]\n\t(No symbol) [0x00007FF618F40C81]\n\t(No symbol) [0x00007FF618F3EC6D]\n\t(No symbol) [0x00007FF618F3F47F]\n\t(No symbol) [0x00007FF618F4E25E]\n\t(No symbol) [0x00007FF618F66A04]\n\t(No symbol) [0x00007FF618FECAA4]\n\t(No symbol) [0x00007FF618FCCDD3]\n\t(No symbol) [0x00007FF618F9A33B]\n\t(No symbol) [0x00007FF618F9AED1]\n\tGetHandleVerifier [0x00007FF619428B1D+3217341]\n\tGetHandleVerifier [0x00007FF619475AE3+3532675]\n\tGetHandleVerifier [0x00007FF61946B0E0+3489152]\n\tGetHandleVerifier [0x00007FF6191CE776+750614]\n\t(No symbol) [0x00007FF6190A375F]\n\t(No symbol) [0x00007FF61909EB14]\n\t(No symbol) [0x00007FF61909ECA2]\n\t(No symbol) [0x00007FF61908E16F]\n\tBaseThreadInitThunk [0x00007FFD649C257D+29]\n\tRtlUserThreadStart [0x00007FFD65A6AF28+40]", "trace": "self = <tests.DocSmart_login.test_docsmartlogin.TestDocSmart object at 0x000001E2B0F532D0>\nlogin = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ca85529b904739112ed843d88946a748\")>\n\n       @pytest.mark.smoke\n      # @pytest.mark.usefixtures(\"setup\")\n       @pytest.mark.usefixtures(\"driver_init\")\n       @pytest.mark.usefixtures(\"login\")\n    \n    #   @pytest.mark.parametrize(\"browser_name\", [\"chrome\"])\n       def test_valid_login(self,login):\n          # driver = driver_init\n           driver = login\n           loginPage = LoginPage(driver)\n>          loginPage.login_patient(user=\"7021656297\", pwd=\"Admin@123\")\n\ntest_docsmartlogin.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\src\\pageObjects\\loginPage.py:48: in login_patient\n    self.get_login_button_hp().click()\n..\\..\\src\\pageObjects\\loginPage.py:22: in get_login_button_hp\n    return WebDriverWait(self.driver, 10).until(\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E2B0F3AA10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"target frame detached\",\"message\":\"target frame detached\\\\n  (failed to ch...07FF61908E16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD649C257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD65A6AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: target frame detached\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=126.0.6478.126)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF61911EEA2+31554]\nE       \t(No symbol) [0x00007FF619097ED9]\nE       \t(No symbol) [0x00007FF618F58559]\nE       \t(No symbol) [0x00007FF618F40C81]\nE       \t(No symbol) [0x00007FF618F3EC6D]\nE       \t(No symbol) [0x00007FF618F3F47F]\nE       \t(No symbol) [0x00007FF618F4E25E]\nE       \t(No symbol) [0x00007FF618F66A04]\nE       \t(No symbol) [0x00007FF618FECAA4]\nE       \t(No symbol) [0x00007FF618FCCDD3]\nE       \t(No symbol) [0x00007FF618F9A33B]\nE       \t(No symbol) [0x00007FF618F9AED1]\nE       \tGetHandleVerifier [0x00007FF619428B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF619475AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF61946B0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF6191CE776+750614]\nE       \t(No symbol) [0x00007FF6190A375F]\nE       \t(No symbol) [0x00007FF61909EB14]\nE       \t(No symbol) [0x00007FF61909ECA2]\nE       \t(No symbol) [0x00007FF61908E16F]\nE       \tBaseThreadInitThunk [0x00007FFD649C257D+29]\nE       \tRtlUserThreadStart [0x00007FFD65A6AF28+40]\n\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1719641101100, "stop": 1719641107249, "uuid": "3a3405a5-f17e-447f-a9f1-d73690e8b652", "historyId": "9f645ef790a70c21359ca9f30608e612", "testCaseId": "9f645ef790a70c21359ca9f30608e612", "fullName": "tests.DocSmart_login.test_docsmartlogin.TestDocSmart#test_valid_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('login')"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "tests.DocSmart_login"}, {"name": "suite", "value": "test_docsmartlogin"}, {"name": "subSuite", "value": "TestDocSmart"}, {"name": "host", "value": "DESKTOP-RNQDI0M"}, {"name": "thread", "value": "23428-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.DocSmart_login.test_docsmartlogin"}]}